<div id="passwordresetformcontainer-outer" class="passwordresetformcontainer-outer">
    <div class="passwordresetformcontainer-inner dark_mode">
        <form id="passwordresetform" action="reset_password">
            <div id="titlecontainer">
                <h2>Your password is expired.</h2>
            </div>
            <div class="passwordresetcontainer">
                <p id="passwordreseterror" style="text-align:center;color:red;"></p>
                <div class="passwordresetfieldcontainer">
                    <!-- Current password input field -->
                    <label for="currentpassword">Current Password</label>
                    <input id="currentpassword" class="passwordresetfield" type="password" name="currentpassword" oninput="resetpasswordreseterrorfield()" required>
                </div>
                <div class="passwordresetfieldcontainer">
                    <!-- New password input field -->
                    <label for="newpassword">New Password</label>
                    <!-- From Copilot:
                    This regular expression pattern is written in the context of HTML code. It appears to be a pattern for validating a password input field. Let's break it down:
                    ^ and $ are anchors that represent the start and end of the string, respectively. This means that the entire string must match the pattern from start to end.
                    (?=.*[A-Za-z]) is a positive lookahead assertion. It checks if the string contains at least one letter (uppercase or lowercase). The .* part matches any character zero or more times, and [A-Za-z] matches any letter.
                    (?=.*\d) is another positive lookahead assertion. It checks if the string contains at least one digit. The .* part matches any character zero or more times, and \d matches any digit.
                    [A-Za-z\d]{8,} matches a sequence of at least 8 characters that can be either letters (uppercase or lowercase) or digits. The {8,} quantifier specifies that there should be a minimum of 8 characters.
                    To summarize, this regular expression pattern ensures that a password input field contains at least one letter, one digit, and is at least 8 characters long. It enforces some basic password complexity requirements.
                    My notes:
                    Need to work on adding this later to this input element.
                    minlength="6" pattern="^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$"
                    -->
                    <input id="newpassword" class="passwordresetfield" type="password" name="newpassword" oninput="resetpasswordreseterrorfield()" required>
                    <!-- TODO: Need to add some sort of visual indicator of what password requirements have been met and which ones haven't. -->
                </div>
                <div class="passwordresetfieldcontainer">
                    <!-- Confirm password input field -->
                    <label for="confirmpassword">Confirm Password</label>
                    <input id="confirmpassword" class="passwordresetfield" type="password" name="confirmpassword" required oninput="checkPasswordMatch(this);resetpasswordreseterrorfield()">
                </div>
                <p id="passwordMatchMessage" style="text-align: center;"></p>
            </div>
            <div id="resetpasswordbuttoncontainer">
                <button id="resetpasswordbutton" onclick="resetpassword(event)" type="submit" disabled>Reset Password</button>
                <button id="cancelresetpasswordbutton" onclick="closePasswordResetModal()" type="reset">Cancel</button>
            </div>
        </form>
    </div>
</div>